<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.task.mapper.EmployeeMapper">
    <resultMap id="RegisterParamResultMap" type="com.example.task.param.RegisterParam">
        <id property="employeeId" column="employee_id"/>
        <result property="password" column="passwd"/>
        <result property="employeeName" column="employee_name"/>
        <result property="sex" column="sex"/>
        <result property="phone" column="phone"/>
        <result property="departmentId" column="dep_id"/>
    </resultMap>

    <resultMap id="LoginParamResultMap" type="com.example.task.param.LoginParam">
        <id property="employeeId" column="employee_id"/>
        <result property="password" column="passwd"/>
    </resultMap>

    <resultMap id="getEmployeeById" type="com.example.task.entity.Employee">
        <id property="employeeId" column="employee_id"/>
        <result property="employeeName" column="employee_name"/>
        <result property="updateTime" column="update_time"/>
        <result property="createTime" column="create_time"/>
        <result property="depId" column="dep_id"/>
        <result property="depName" column="dep_name"/>
        <result property="role" column="user_role"/>
    </resultMap>

    <resultMap id="getEmployeeVOById" type="com.example.task.vo.EmployeeVO">
        <id property="employeeId" column="employee_id"/>
        <result property="employeeName" column="employee_name"/>
        <result property="sex" column="sez"/>
        <result property="phone" column="phone"/>
        <result property="departmentName" column="dep_name"/>
        <result property="role" column="user_role"/>
    </resultMap>

    <insert id="insert">
        insert into salary_system.t_employee(employee_id, passwd, employee_name, sex, phone, dep_name, dep_id)
        values (#{employeeId}, #{encodedPassword}, #{employeeName}, #{sex}, #{phone}, #{departmentName}, #{departmentId})
    </insert>

    <insert id="adminInsert">
        insert into salary_system.t_employee(employee_id, employee_name, phone, sex, dep_name, user_role, passwd, dep_id)
        values (#{employeeId}, #{employeeName}, #{phone}, #{sex}, #{departmentName}, #{role}, #{passwd}, #{departmentId})
    </insert>

    <update id="employeeModifyOwnInfo">
        update salary_system.t_employee
        <set>
            <if test="employeeName != null">
                employee_name = #{employeeName},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="departmentId != null">
                dep_id = #{departmentId},
                dep_name = (
                select dep_name
                from salary_system.t_department
                where dep_id = #{departmentId}
                )
            </if>
        </set>
        where employee_id = #{employeeId}
    </update>

    <update id="adminModifyEmployeeInfo">
        update salary_system.t_employee
        <set>
            <if test="employeeName != null">
                employee_name = #{employeeName},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="departmentId != null">
                dep_id = #{departmentId},
                dep_name = #{departmentName},
            </if>
            <if test="password != null">
                passwd = #{password},
            </if>
            <if test="phone != null">
                phone = #{phone},
            </if>
            <if test="role != null">
                user_role = #{role}
            </if>
        </set>
        where employee_id = #{employeeId}
    </update>

    <update id="updateDepName">
        update salary_system.t_department
        set dep_name = #{modifiedDepartmentName}
        where dep_name = #{originDepartmentName}
    </update>

    <update id="updatePassword">
        update salary_system.t_employee
        set passwd = #{modifiedPassword}
        where employee_id = #{employeeId}
    </update>

    <delete id="delete">
        delete
        from salary_system.t_employee
        where employee_id = #{employeeId}
    </delete>

    <select id="findEmployeeById" resultMap="RegisterParamResultMap">
        select employee_id
        from salary_system.t_employee
        where employee_id = #{employeeId}
    </select>

    <select id="getEmployeeByEId" resultMap="getEmployeeById">
        select *
        from salary_system.t_employee
        where employee_id = #{employeeId}
    </select>

    <select id="getEmployeeList" resultMap="getEmployeeVOById">
        select employee_id,employee_name,sex,phone,dep_name,user_role
        from salary_system.t_employee
        <where>
            <if test="employeeId != null">
                employee_id = #{employeeId}
            </if>
            <if test="employeeName != null">
                employee_name = #{employeeName}
            </if>
            <if test="departmentId != null">
                dep_id = #{departmentId}
            </if>
            <if test="phone != null">
                phone = #{phone}
            </if>
            <if test="role != null">
                user_role = #{role}
            </if>
        </where>
    </select>

    <select id="getPasswordByEmployeeId" resultType="java.lang.String">
        select passwd
        from salary_system.t_employee
        where employee_id = #{employeeId}
    </select>

    <select id="getDepNameByDepId" resultType="java.lang.String">
        select dep_name
        from salary_system.t_department
        where dep_id = #{departmentId}
    </select>
</mapper>
